import streamlit as st
from itertools import permutations, product
from math import factorial
import math
import time

st.set_page_config(page_title="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥–∞—á–∏ –≤–∞–≥–æ–Ω–æ–≤", page_icon="üöÇ", layout="centered")

st.title("üöÇ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥–∞—á–∏ –≤–∞–≥–æ–Ω–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–∞–Ω–µ–≤—Ä–æ–≤—ã–º–∏ –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞–º–∏")

# === –í–≤–æ–¥ ===
num_paths = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π (i):", min_value=1, step=1)
num_loco = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–Ω–µ–≤—Ä–æ–≤—ã—Ö –ª–æ–∫–æ–º–æ—Ç–∏–≤–æ–≤:", min_value=1, step=1)

paths_fronts = []   # —Å–ø–∏—Å–æ–∫ —Ñ—Ä–æ–Ω—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—É—Ç–∏
front_data = []     # –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ—Ä–æ–Ω—Ç–æ–≤
global_idx = 0

for path in range(1, num_paths + 1):
    p = st.number_input(f"–ü—É—Ç—å {path}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–æ–Ω—Ç–æ–≤ (p_{path})", min_value=1, step=1, key=f"p{path}")
    local_idxs = []
    for j in range(1, p + 1):
        n = st.number_input(f"  –§—Ä–æ–Ω—Ç (–≥–ª–æ–±. {global_idx+1}) ‚Äî —á–∏—Å–ª–æ –≤–∞–≥–æ–Ω–æ–≤", min_value=1, step=1,
                            key=f"n_{path}_{j}")
        tau = st.number_input(f"  –§—Ä–æ–Ω—Ç (–≥–ª–æ–±. {global_idx+1}) ‚Äî –≤—Ä–µ–º—è œÑ (—á–∞—Å—ã)", min_value=0.0, step=0.1,
                              key=f"t_{path}_{j}")
        front_data.append((n, tau, path-1, j-1))
        local_idxs.append(global_idx)
        global_idx += 1
    paths_fronts.append(local_idxs)

st.write(f"–í—Å–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–æ–≤: {len(front_data)} (–Ω–æ–º–µ—Ä—É—é—Ç—Å—è 1..{len(front_data)})")

# === —Ñ—É–Ω–∫—Ü–∏–∏ ===
def B_for_order(order, n_list, tau_list):
    B = 0
    t = len(order)
    for k in range(t):
        cum = sum(tau_list[j] for j in order[k:])
        B += n_list[order[k]] * cum
    return B

def smith_order_indices(indices, n_list, tau_list):
    return sorted(indices, key=lambda i: (tau_list[i] / n_list[i], i))

def divide_indices(indices, m):
    """–¥–µ–ª–∏—Ç —Ñ—Ä–æ–Ω—Ç—ã –º–µ–∂–¥—É m –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞–º–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏"""
    groups = [[] for _ in range(m)]
    for i, idx in enumerate(indices):
        groups[i % m].append(idx)
    return groups

# === –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π ===
i = len(paths_fronts)
p_list = [len(lst) for lst in paths_fronts]
t = sum(p_list)
K_exact = factorial(i) * math.prod(factorial(p) for p in p_list)

approx_time = K_exact / 200000
if approx_time < 1:
    msg_time = "–º–≥–Ω–æ–≤–µ–Ω–Ω–æ (< 1 —Å–µ–∫)"
elif approx_time < 10:
    msg_time = f"‚âà {approx_time:.1f} —Å–µ–∫"
elif approx_time < 60:
    msg_time = f"‚âà {approx_time:.1f} —Å–µ–∫ (~{approx_time/60:.1f} –º–∏–Ω)"
else:
    msg_time = f"‚âà {approx_time/60:.1f} –º–∏–Ω"

st.write(f"üî¢ –û—Ü–µ–Ω–∫–∞ —á–∏—Å–ª–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: **K = i! √ó Œ† p‚Çô! = {K_exact:,}**")
st.write(f"‚è±Ô∏è –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {msg_time}")

THRESHOLD = 10_000_000

if st.button("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"):
    n_list = [fd[0] for fd in front_data]
    tau_list = [fd[1] for fd in front_data]

    path_indices = list(range(i))
    bestB_single = float("inf")
    best_order_single = None

    # === –≤—ã—á–∏—Å–ª—è–µ–º –æ–¥–Ω–æ–ª–æ–∫–æ–º–æ—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ===
    with st.spinner("–í—ã—á–∏—Å–ª—è–µ—Ç—Å—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏ –æ–¥–Ω–æ–º –ª–æ–∫–æ–º–æ—Ç–∏–≤–µ..."):
        if K_exact > THRESHOLD:
            for path_perm in permutations(path_indices):
                final_order = []
                for pidx in path_perm:
                    final_order.extend(smith_order_indices(paths_fronts[pidx], n_list, tau_list))
                curB = B_for_order(final_order, n_list, tau_list)
                if curB < bestB_single:
                    bestB_single = curB
                    best_order_single = final_order.copy()
        else:
            perm_lists = [list(permutations(paths_fronts[pidx])) for pidx in path_indices]
            for path_perm in permutations(path_indices):
                for combo in product(*perm_lists):
                    final_order = []
                    for pidx in path_perm:
                        final_order.extend(combo[pidx])
                    curB = B_for_order(final_order, n_list, tau_list)
                    if curB < bestB_single:
                        bestB_single = curB
                        best_order_single = final_order.copy()

    st.subheader("üìä –û–¥–Ω–æ–ª–æ–∫–æ–º–æ—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:")
    st.write(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π B‚ÇÅ = {bestB_single:.3f}")
    st.write("–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ñ—Ä–æ–Ω—Ç–æ–≤:", [x+1 for x in best_order_single])

    # === –µ—Å–ª–∏ >1 –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞ ===
    if num_loco > 1:
        with st.spinner(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ–∂–¥—É {num_loco} –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞–º–∏..."):
            # —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—Ä–æ–Ω—Ç—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é Smith –∏ –¥–µ–ª–∏–º –ø–æ –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞–º
            indices = smith_order_indices(list(range(t)), n_list, tau_list)
            groups = divide_indices(indices, num_loco)

            total_B = 0
            st.subheader(f"üöÇ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ {num_loco} –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞–º:")

            for loco in range(num_loco):
                group = groups[loco]
                order = smith_order_indices(group, n_list, tau_list)
                Bval = B_for_order(order, n_list, tau_list)
                total_B += Bval
                st.write(f"–õ–æ–∫–æ–º–æ—Ç–∏–≤ {loco+1}: —Ñ—Ä–æ–Ω—Ç—ã { [i+1 for i in order] },  B = {Bval:.3f}")

            economy = bestB_single - total_B
            st.success(f"‚úÖ –°—É–º–º–∞—Ä–Ω—ã–µ –≤–∞–≥–æ–Ω–æ-—á–∞—Å—ã (B): {total_B:.3f}")
            st.info(f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –æ–¥–Ω–∏–º –ª–æ–∫–æ–º–æ—Ç–∏–≤–æ–º: {economy:.3f}")

    else:
        st.info("üîπ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–∏–Ω –ª–æ–∫–æ–º–æ—Ç–∏–≤ ‚Äî –º–Ω–æ–≥–æ–ª–æ–∫–æ–º–æ—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á—ë—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

st.caption("üí°")
