import streamlit as st
from itertools import permutations

st.set_page_config(page_title="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥–∞—á–∏ –≤–∞–≥–æ–Ω–æ–≤", page_icon="üöÇ", layout="centered")

st.title("üöÇ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥–∞—á–∏ –≤–∞–≥–æ–Ω–æ–≤ –Ω–∞ –ø–æ–≥—Ä—É–∑–æ—á–Ω–æ-—Ä–∞–∑–≥—Ä—É–∑–æ—á–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–∞–Ω–µ–≤—Ä–æ–≤—ã–º–∏ –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞–º–∏")

st.write("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π –∏ —Ñ—Ä–æ–Ω—Ç–æ–≤:")

# === –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ===
num_paths = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π:", min_value=1, step=1)

front_data = []
front_counter = 1
for path in range(1, num_paths + 1):
    n_fronts = st.number_input(f"–ü—É—Ç—å {path}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–æ–Ω—Ç–æ–≤", min_value=1, step=1, key=f"fr{path}")
    for f in range(1, n_fronts + 1):
        n = st.number_input(f"  –§—Ä–æ–Ω—Ç {front_counter}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–≥–æ–Ω–æ–≤", min_value=1, step=1, key=f"n{front_counter}")
        t = st.number_input(f"  –§—Ä–æ–Ω—Ç {front_counter}: –≤—Ä–µ–º—è –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ –¥–æ —Ñ—Ä–æ–Ω—Ç–∞ (—á–∞—Å—ã)", min_value=0.0, step=0.1, key=f"t{front_counter}")
        front_data.append((n, t))
        front_counter += 1

num_loco = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–Ω–µ–≤—Ä–æ–≤—ã—Ö –ª–æ–∫–æ–º–æ—Ç–∏–≤–æ–≤:", min_value=1, step=1)

# === –ê–ª–≥–æ—Ä–∏—Ç–º—ã ===
def B_for_order(order, n, tau):
    B = 0
    for k in range(len(order)):
        cum = sum(tau[j] for j in order[k:])
        B += n[order[k]] * cum
    return B

def smith_order(indices, n, tau):
    return sorted(indices, key=lambda i: (tau[i] / n[i], i))

def find_optimal_order_for_set(indices, n, tau):
    bestB = float("inf")
    best_order = None
    for perm in permutations(indices):
        curB = B_for_order(list(perm), n, tau)
        if curB < bestB:
            bestB = curB
            best_order = list(perm)
    return best_order, bestB
    else:
        ords = smith_order(indices, n, tau)
        return ords, B_for_order(ords, n, tau)

def divide_indices(indices, m):
    chunks = [[] for _ in range(m)]
    for i, idx in enumerate(indices):
        chunks[i % m].append(idx)
    return chunks

def format_groups(lst):
    return [i + 1 for i in lst]

# === –ö–Ω–æ–ø–∫–∞ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å" ===
if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"):
    if len(front_data) == 0:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ—Ä–æ–Ω—Ç!")
    else:
        n = [g[0] for g in front_data]
        tau = [g[1] for g in front_data]
        t = len(n)

        st.subheader("üìã –í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for i in range(t):
            st.write(f"–§—Ä–æ–Ω—Ç {i+1}: n={n[i]}, œÑ={tau[i]}")

        # –û–¥–∏–Ω –ª–æ–∫–æ–º–æ—Ç–∏–≤
        full_order, B_single = find_optimal_order_for_set(list(range(t)), n, tau)
        st.write(f"**–û–¥–Ω–æ–ª–æ–∫–æ–º–æ—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:** –ø–æ—Ä—è–¥–æ–∫ {format_groups(full_order)}, B = {B_single:.3f}")

        if num_loco == 1:
            st.success(f"–í—Å–µ —Ñ—Ä–æ–Ω—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –æ–¥–∏–Ω –ª–æ–∫–æ–º–æ—Ç–∏–≤, —Å—É–º–º–∞—Ä–Ω—ã–µ –≤–∞–≥–æ–Ω–æ-—á–∞—Å—ã: {B_single:.3f}")
        else:
            indices = smith_order(list(range(t)), n, tau)
            parts = divide_indices(indices, num_loco)

            total_B = 0
            st.subheader("üöÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞–º:")
            for loco in range(num_loco):
                order, Bval = find_optimal_order_for_set(parts[loco], n, tau)
                total_B += Bval
                st.write(f"–õ–æ–∫–æ–º–æ—Ç–∏–≤ {loco+1}: —Ñ—Ä–æ–Ω—Ç—ã {format_groups(order)}, B = {Bval:.3f}")

            st.success(f"**–°—É–º–º–∞—Ä–Ω—ã–µ –≤–∞–≥–æ–Ω–æ-—á–∞—Å—ã (B):** {total_B:.3f}")
            st.info(f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –æ–¥–Ω–∏–º –ª–æ–∫–æ–º–æ—Ç–∏–≤–æ–º: {B_single - total_B:.3f}")



