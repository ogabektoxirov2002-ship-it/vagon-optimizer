import streamlit as st
from itertools import permutations, product
from math import factorial
import math
import time

st.set_page_config(page_title="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥–∞—á–∏ ",
                   page_icon="üöÇ", layout="centered")

st.title("üöÇ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥–∞—á–∏ –≤–∞–≥–æ–Ω–æ–≤ ")

# === –í–≤–æ–¥ ===
num_paths = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π (i):", min_value=1, step=1)

paths_fronts = []   # —Å–ø–∏—Å–æ–∫ —Ñ—Ä–æ–Ω—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—É—Ç–∏
front_data = []     # –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ—Ä–æ–Ω—Ç–æ–≤
global_idx = 0

for path in range(1, num_paths + 1):
    p = st.number_input(f"–ü—É—Ç—å {path}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–æ–Ω—Ç–æ–≤ (p_{path})", min_value=1, step=1, key=f"p{path}")
    local_idxs = []
    for j in range(1, p + 1):
        n = st.number_input(f"  –§—Ä–æ–Ω—Ç (–≥–ª–æ–±. {global_idx+1}) ‚Äî —á–∏—Å–ª–æ –≤–∞–≥–æ–Ω–æ–≤", min_value=1, step=1,
                            key=f"n_{path}_{j}")
        tau = st.number_input(f"  –§—Ä–æ–Ω—Ç (–≥–ª–æ–±. {global_idx+1}) ‚Äî –≤—Ä–µ–º—è œÑ (—á–∞—Å—ã)", min_value=0.0, step=0.1,
                              key=f"t_{path}_{j}")
        front_data.append((n, tau, path-1, j-1))
        local_idxs.append(global_idx)
        global_idx += 1
    paths_fronts.append(local_idxs)

st.write("")  
st.write(f"–í—Å–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–æ–≤: {len(front_data)} (–Ω–æ–º–µ—Ä—É—é—Ç—Å—è 1..{len(front_data)})")

# === helper funcs ===
def B_for_order(order, n_list, tau_list):
    B = 0
    t = len(order)
    for k in range(t):
        cum = sum(tau_list[j] for j in order[k:])
        B += n_list[order[k]] * cum
    return B

def smith_order_indices(indices, n_list, tau_list):
    return sorted(indices, key=lambda i: (tau_list[i] / n_list[i], i))

# === –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π ===
i = len(paths_fronts)
p_list = [len(lst) for lst in paths_fronts]
t = sum(p_list)
K_exact = factorial(i) * math.prod(factorial(p) for p in p_list)

# === –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ ===
approx_time = K_exact / 200000  # —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏: 200k –∫–æ–º–±–∏–Ω. ‚âà 1 —Å–µ–∫—É–Ω–¥–∞
if approx_time < 1:
    msg_time = "–º–≥–Ω–æ–≤–µ–Ω–Ω–æ (< 1 —Å–µ–∫)"
elif approx_time < 10:
    msg_time = f"‚âà {approx_time:.1f} —Å–µ–∫"
elif approx_time < 60:
    msg_time = f"‚âà {approx_time:.1f} —Å–µ–∫ (~{approx_time/60:.1f} –º–∏–Ω)"
else:
    msg_time = f"‚âà {approx_time/60:.1f} –º–∏–Ω"

st.write(f"üî¢ –û—Ü–µ–Ω–∫–∞ —á–∏—Å–ª–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: **K = i! √ó Œ† p‚Çô! = {K_exact:,}**")
st.write(f"‚è±Ô∏è –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {msg_time}")

# —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥
THRESHOLD = 10_000_000

if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—á—ë—Ç"):
    n_list = [fd[0] for fd in front_data]
    tau_list = [fd[1] for fd in front_data]

    if K_exact > THRESHOLD:
        st.warning(f"K = {K_exact:,} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ {THRESHOLD:,}. "
                   "–í–∫–ª—é—á—ë–Ω —É—Å–∫–æ—Ä—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º (i! –∫–æ–º–±–∏–Ω–∞—Ü–∏–π, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ ‚Äî –ø–æ –ø—Ä–∞–≤–∏–ª—É –°–º–∏—Ç–∞).")
        path_indices = list(range(i))
        bestB = float("inf")
        best_order = None

        with st.spinner(f"–í—ã—á–∏—Å–ª—è—é —É—Å–∫–æ—Ä—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."):
            start = time.time()
            for path_perm in permutations(path_indices):
                final_order = []
                for pidx in path_perm:
                    final_order.extend(smith_order_indices(paths_fronts[pidx], n_list, tau_list))
                curB = B_for_order(final_order, n_list, tau_list)
                if curB < bestB:
                    bestB = curB
                    best_order = final_order.copy()
            duration = time.time() - start

        st.success(f"–ì–æ—Ç–æ–≤–æ –∑–∞ {duration:.1f} —Å–µ–∫.")
        st.write(f"–õ—É—á—à–∏–π B (—É—Å–∫–æ—Ä—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º): {bestB:.3f}")
        st.write("–ü–æ—Ä—è–¥–æ–∫ —Ñ—Ä–æ–Ω—Ç–æ–≤ (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞):", [x+1 for x in best_order])

    else:
        st.info(f"–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä {K_exact:,} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ {msg_time}.")
        n_list = [fd[0] for fd in front_data]
        tau_list = [fd[1] for fd in front_data]
        path_indices = list(range(i))

        # –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
        perm_lists = [list(permutations(paths_fronts[pidx])) for pidx in path_indices]

        bestB = float("inf")
        best_order = None
        total_checked = 0

        with st.spinner(f"–í—ã—á–∏—Å–ª—è—é {K_exact:,} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."):
            start = time.time()
            for path_perm in permutations(path_indices):
                for combo in product(*perm_lists):
                    final_order = []
                    for pidx in path_perm:
                        final_order.extend(combo[pidx])
                    curB = B_for_order(final_order, n_list, tau_list)
                    total_checked += 1
                    if curB < bestB:
                        bestB = curB
                        best_order = final_order.copy()
            duration = time.time() - start

        st.success(f"–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {duration:.1f} —Å–µ–∫.")
        st.write(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {total_checked:,}")
        st.write(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π B = {bestB:.3f}")
        st.write("–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ñ—Ä–æ–Ω—Ç–æ–≤ (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞):", [x+1 for x in best_order])

st.caption("üí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –µ—Å–ª–∏ —Ä–∞—Å—á—ë—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ä–æ–≥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å–∫–æ—Ä—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º.")

